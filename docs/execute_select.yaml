---
version: 1.0

description: >
  Workflow para ejecutar SELECT en base de datos, con validación previa y recuperación de credenciales via st2kv.

input:
  - environment
  - database
  - query

vars:
  - kv_key_name: null
  - credentials: null
  - conn_info: null
  - query_result: null
  - estado: null
  - mensaje: null

tasks:

  build_kv_key:
    action: core.noop
    next:
      - when: "true"
        publish:
          - kv_key_name: "db_{{ ctx().environment }}_{{ ctx().database }}"
        do: get_credentials

  get_credentials:
    action: st2.kv.get
    input:
      key: "{{ ctx().kv_key_name }}"
    next:
      - when: <% succeeded() %>
        publish:
          - credentials: "{{ result().result }}"
        do: parse_conn_info
      - when: <% failed() %>
        publish:
          - estado: "failed"
          - mensaje: "Fallo al obtener las credenciales de db_{{ ctx().environment }}_{{ ctx().database }}, por favor verificar."

  parse_conn_info:
    action: utils.parse_json
    input:
      input_string: "{{ ctx().credentials }}"
    next:
      - when: <% succeeded() %>
        publish:
          - conn_info: "{{ result().result }}"
        do: validate_query
      - when: <% failed() %>
        publish:
          - estado: "failed"
          - mensaje: "Fallo al parsear las credenciales a json."

  validate_query:
    action: select_query.validate_select
    input:
      query: "{{ ctx().query }}"
    next:
      - when: <% succeeded() %>
        do: execute_query
      - when:  <% failed() %>
        publish:
          - estado: "failed"
          - mensaje: "Fallo al validar la consulta SQL."

  execute_query:
    action: sql.query
    input:
      host: "{{ ctx().conn_info.host }}"
      port: "{{ ctx().conn_info.port }}"
      username: "{{ ctx().conn_info.username }}"
      password: "{{ ctx().conn_info.password }}"
      database: "{{ ctx().conn_info.database }}"
      drivername: "{{ ctx().conn_info.drivername }}"
      query: "{{ ctx().query }}"
    next:
      - when: <% succeeded() %>
        publish:
          - mensaje: "{{ result().result }}"
        do: verificar_tabla
      - when:  <% failed() %>
        publish:
          - estado: "failed"
          - mensaje: "Fallo al ejecutar la consulta SQL."
          
  verificar_tabla:
    action: sql.query
    input:
      host: "{{ ctx().conn_info.host }}"
      port: "{{ ctx().conn_info.port }}"
      username: "{{ ctx().conn_info.username }}"
      password: "{{ ctx().conn_info.password }}"
      database: "{{ ctx().conn_info.database }}"
      drivername: "{{ ctx().conn_info.drivername }}"
      query: |
        SELECT 1 
        FROM information_schema.tables 
        WHERE table_schema = 'public' AND table_name = 'auditoria_ejecuciones';
    next:
      - when: <% len(result().result) = 0 %>
        do: crear_tabla
      - when: <% len(result().result) > 0 %>
        do: insertar_auditoria
        
  crear_tabla:
    action: sql.query
    input:
      host: "{{ ctx().conn_info.host }}"
      port: "{{ ctx().conn_info.port }}"
      username: "{{ ctx().conn_info.username }}"
      password: "{{ ctx().conn_info.password }}"
      database: "{{ ctx().conn_info.database }}"
      drivername: "{{ ctx().conn_info.drivername }}"
      query: |
        CREATE TABLE auditoria_ejecuciones (
          id SERIAL PRIMARY KEY,
          usuario TEXT,
          fecha_hora TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          descripcion TEXT
        );
    next:
      - when: <% succeeded() %>
        do: insertar_auditoria
      - when:  <% failed() %>
        publish:
          - estado: "failed"
          - mensaje: "Fallo al crear la tabla para auditoria."
      
  insertar_auditoria:
    action: sql.query
    input:
      host: "{{ ctx().conn_info.host }}"
      port: "{{ ctx().conn_info.port }}"
      username: "{{ ctx().conn_info.username }}"
      password: "{{ ctx().conn_info.password }}"
      database: "{{ ctx().conn_info.database }}"
      drivername: "{{ ctx().conn_info.drivername }}"
      query: |
        INSERT INTO auditoria_ejecuciones (usuario, fecha_hora, descripcion)
        VALUES ('{{ ctx().st2.user }}', CURRENT_TIMESTAMP, 'Consulta de nombres desde la tabla personas');
    next:
      - when: <% succeeded() %>
        publish:
          - estado: "succeeded"
      - when:  <% failed() %>
        publish:
          - estado: "failed"
          - mensaje: "Fallo al ejecutar registrar la ejecucion en la tabla de auditoria."

output:
  - estado: <% ctx().estado %>
  - resultado: <% ctx().mensaje %>



